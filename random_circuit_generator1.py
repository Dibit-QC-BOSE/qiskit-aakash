import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(5)
c = ClassicalRegister(5)
qc = QuantumCircuit(q, c)
qc.u1(2.01755,q[1])
qc.cx(q[4],q[3])
qc.u2(1.59519,4.76684,q[4])
qc.cx(q[0],q[4])
qc.ccx(q[2],q[0],q[3])
qc.u3(1.58718,6.07008,1.54505,q[4])
qc.cx(q[3],q[2])
qc.u2(0.51872,4.98278,q[0])
qc.cx(q[3],q[1])
qc.u2(4.26926,3.80096,q[4])
qc.u3(0.19013,0.7479,3.21802,q[1])
qc.u1(1.27085,q[4])
qc.cx(q[4],q[3])
qc.u1(2.94126,q[4])
qc.ccx(q[2],q[1],q[0])
qc.u1(2.49209,q[0])
qc.u2(1.70676,1.25192,q[1])
qc.u3(1.45647,4.75206,0.9768,q[2])
qc.u1(5.93006,q[0])
qc.ccx(q[2],q[1],q[0])
qc.u2(5.79991,5.83641,q[3])
qc.ccx(q[1],q[4],q[0])
qc.u1(0.08356,q[4])
qc.u2(3.43745,3.36528,q[1])
qc.u1(6.01585,q[3])
qc.u1(5.65239,q[0])
qc.cx(q[1],q[2])
qc.u3(0.30806,5.48723,2.76704,q[0])
qc.ccx(q[0],q[4],q[3])
qc.u2(1.86819,5.74629,q[0])
qc.u3(0.01032,6.17893,0.05567,q[4])
qc.u2(4.84751,0.35264,q[0])
qc.ccx(q[1],q[2],q[0])
qc.ccx(q[2],q[0],q[4])
qc.u2(2.86738,2.07795,q[3])
qc.u1(3.94053,q[2])
qc.ccx(q[0],q[2],q[4])
qc.u3(2.64698,1.77607,6.01536,q[4])
qc.u1(1.76494,q[1])
qc.ccx(q[3],q[4],q[0])
qc.cx(q[1],q[4])
qc.u1(1.94783,q[0])
qc.u2(0.43962,3.76741,q[1])
qc.u2(2.14037,4.4038,q[2])
qc.u3(0.5591,0.43866,2.91004,q[0])
qc.u2(6.21401,3.91478,q[2])
qc.ccx(q[0],q[1],q[3])
qc.u2(1.24683,4.37545,q[2])
qc.cx(q[4],q[1])
qc.cx(q[3],q[0])
qc.ccx(q[1],q[2],q[0])
qc.u2(1.50291,3.07868,q[1])
qc.ccx(q[4],q[3],q[0])
qc.u3(0.63948,0.76452,5.11045,q[0])
qc.u3(2.52732,5.49663,0.11095,q[1])
qc.cx(q[1],q[3])
qc.u1(2.86607,q[1])
qc.ccx(q[0],q[3],q[1])
qc.u2(0.31204,5.52981,q[4])
qc.u1(5.08227,q[3])
qc.u3(1.41722,5.37167,4.95145,q[3])
qc.ccx(q[3],q[2],q[0])
qc.u2(4.17012,0.39086,q[3])
qc.u3(1.55585,3.7386,4.34388,q[2])
qc.cx(q[1],q[4])
qc.u1(3.93641,q[4])
qc.ccx(q[2],q[1],q[4])
qc.u2(4.75136,3.82676,q[4])
qc.u1(5.35269,q[2])
qc.u1(0.8682,q[1])
qc.cx(q[3],q[1])
qc.ccx(q[1],q[0],q[3])
qc.u3(1.66461,3.43113,0.42982,q[4])
qc.ccx(q[0],q[4],q[3])
qc.u3(1.59572,3.16626,6.28167,q[4])
qc.u2(2.13922,4.59543,q[0])
qc.u3(0.05951,4.94182,4.23272,q[1])
qc.cx(q[1],q[3])
qc.cx(q[1],q[4])
qc.u1(0.28317,q[4])
qc.u2(3.9938,6.2599,q[3])
qc.cx(q[0],q[1])
qc.u1(0.34323,q[4])
qc.cx(q[1],q[3])
qc.u1(5.95951,q[2])
qc.cx(q[0],q[4])
qc.u1(2.49996,q[2])
qc.u2(4.66363,0.85628,q[2])
qc.u2(4.19175,0.01566,q[3])
qc.cx(q[0],q[4])
qc.u2(6.01762,6.24819,q[0])
qc.cx(q[4],q[1])
qc.ccx(q[4],q[0],q[3])
qc.u3(1.36126,4.73743,4.4861,q[2])
qc.cx(q[1],q[2])
qc.cx(q[3],q[2])
qc.cx(q[0],q[4])
qc.u3(1.20639,5.53514,2.91843,q[4])
qc.u2(3.26215,1.39102,q[1])
qc.ccx(q[1],q[4],q[3])
qc.u1(0.0745,q[0])
qc.u3(3.10844,0.42135,5.37555,q[4])
qc.cx(q[4],q[3])
qc.u3(0.34945,0.3471,1.84761,q[1])
qc.u2(3.51034,2.81528,q[3])
qc.u3(0.21922,3.9127,0.69438,q[3])
qc.u3(3.05342,0.89478,1.2521,q[4])
qc.u3(2.65028,2.07209,0.99762,q[4])
qc.ccx(q[1],q[4],q[2])
qc.cx(q[0],q[1])
qc.u3(1.89436,1.74626,5.37832,q[2])
qc.u1(0.50023,q[2])
qc.u3(1.27893,3.97256,6.23108,q[4])
qc.u3(0.20364,4.48976,1.09025,q[3])
qc.ccx(q[4],q[0],q[2])
qc.cx(q[2],q[4])
qc.ccx(q[4],q[2],q[3])
qc.u3(2.1705,2.25251,6.01183,q[1])
qc.u1(2.16657,q[4])
qc.u3(0.03435,4.70583,2.27978,q[0])
qc.cx(q[2],q[3])
qc.u2(1.4027,2.30855,q[1])
qc.u2(3.07363,5.50864,q[3])
qc.u1(4.0622,q[4])
qc.u1(1.2554,q[0])
qc.ccx(q[4],q[2],q[3])
qc.u2(6.01201,4.84719,q[4])
qc.cx(q[1],q[4])
qc.ccx(q[4],q[3],q[2])
qc.u2(2.17754,6.11521,q[4])
qc.cx(q[3],q[2])
qc.u2(2.98623,2.34065,q[1])
qc.u2(5.73453,1.3363,q[3])
qc.u2(5.05619,1.87032,q[3])
qc.u1(6.02139,q[2])
qc.cx(q[1],q[3])
qc.u1(5.97095,q[3])
qc.u2(4.20951,5.7138,q[0])
qc.cx(q[0],q[3])
qc.u2(2.22544,4.78473,q[3])
qc.u1(5.9519,q[4])
qc.u2(4.99416,1.04251,q[4])
qc.u1(2.47645,q[1])
qc.u1(3.46173,q[0])
qc.u3(2.08009,2.72706,1.92746,q[0])
qc.cx(q[2],q[0])
qc.u2(1.04913,3.1857,q[0])
qc.u2(3.12271,3.95853,q[3])
qc.ccx(q[4],q[3],q[1])
qc.u1(1.05185,q[4])
qc.u3(1.67733,5.8024,3.59652,q[1])
qc.u1(4.16553,q[0])
qc.u1(5.73539,q[1])
qc.u2(0.20997,1.48857,q[4])
qc.cx(q[2],q[3])
qc.ccx(q[3],q[1],q[2])
qc.u2(5.07022,5.9788,q[2])
qc.u2(1.79328,4.20019,q[1])
qc.u3(1.11636,5.39986,3.04451,q[0])
qc.cx(q[4],q[2])
qc.ccx(q[0],q[1],q[3])
qc.u2(0.76791,2.44695,q[1])
qc.u2(2.01209,4.47981,q[0])
qc.cx(q[4],q[1])
qc.ccx(q[1],q[2],q[3])
qc.u1(0.37891,q[2])
qc.u3(1.51747,2.66946,2.179,q[2])
qc.ccx(q[0],q[4],q[2])
qc.u3(2.65277,5.04477,2.47319,q[4])
qc.cx(q[3],q[2])
qc.u2(3.52709,2.51704,q[3])
qc.u3(0.69074,4.09126,1.16733,q[0])
qc.ccx(q[3],q[4],q[1])
qc.u1(5.36268,q[2])
qc.u1(1.9588,q[2])
qc.u2(2.80581,4.4943,q[3])
qc.u2(0.01436,1.26245,q[2])
qc.u2(2.75259,2.54372,q[4])
qc.u3(2.32716,6.1136,5.54101,q[4])
qc.cx(q[3],q[4])
qc.u2(0.73658,3.00686,q[3])
qc.u2(5.04991,3.24284,q[1])
qc.u1(4.27063,q[4])
qc.u3(3.01627,4.1756,3.62268,q[0])
qc.u3(0.36039,3.04758,0.10997,q[4])
qc.u3(3.06035,3.03191,5.34126,q[3])
qc.u3(0.7185,3.39755,5.99696,q[1])
qc.u2(2.16257,5.72947,q[4])
qc.u2(1.80156,1.15938,q[2])
qc.ccx(q[2],q[1],q[0])
qc.u1(4.32148,q[3])
qc.ccx(q[0],q[3],q[1])
qc.u1(4.09463,q[4])
qc.cx(q[4],q[2])
qc.cx(q[1],q[3])
qc.u3(2.98138,0.61882,0.92393,q[3])
qc.u1(1.31776,q[0])
qc.cx(q[3],q[1])
qc.u3(2.59771,3.67195,5.66165,q[2])
qc.u3(1.07178,0.48581,3.42659,q[0])
qc.u3(1.33961,4.52934,2.13497,q[1])
qc.u2(5.36414,4.04919,q[0])
qc.u2(4.90968,4.12285,q[4])
qc.u3(0.33836,4.95796,4.08184,q[0])
qc.u3(0.90782,1.8464,6.0883,q[2])
qc.cx(q[4],q[0])
qc.u3(1.68582,4.22357,0.37099,q[2])
qc.u1(1.52076,q[3])
qc.ccx(q[4],q[2],q[3])
qc.cx(q[3],q[4])
qc.ccx(q[4],q[0],q[2])
qc.cx(q[3],q[1])
qc.cx(q[1],q[3])
qc.u1(4.42578,q[1])
qc.cx(q[4],q[2])
qc.u1(4.26724,q[2])
qc.u1(2.02577,q[1])
qc.ccx(q[4],q[0],q[2])
qc.ccx(q[2],q[3],q[4])
qc.u3(1.36261,4.83003,6.12845,q[4])
qc.u3(0.31124,0.42153,3.16995,q[1])
qc.ccx(q[2],q[4],q[1])
qc.cx(q[1],q[0])
qc.ccx(q[1],q[2],q[0])
qc.u2(4.72887,2.36985,q[4])
qc.u1(5.63053,q[1])
qc.u2(2.00999,3.01967,q[0])
qc.u2(3.54538,0.54625,q[2])
qc.cx(q[0],q[2])
qc.u2(5.74923,0.26546,q[1])
qc.u2(3.90139,3.78314,q[0])
qc.u3(2.18159,1.02517,2.73604,q[2])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
