import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(6)
c = ClassicalRegister(6)
qc = QuantumCircuit(q, c)
qc.u3(2.48549,1.3451,4.33574,q[3])
qc.cx(q[0],q[1])
qc.u2(3.00362,4.11614,q[5])
qc.u1(4.06165,q[2])
qc.u2(2.04435,0.20608,q[5])
qc.u1(1.19921,q[3])
qc.cx(q[2],q[3])
qc.cx(q[4],q[2])
qc.ccx(q[3],q[0],q[1])
qc.u1(2.86023,q[5])
qc.u3(2.65913,2.33429,3.77842,q[4])
qc.ccx(q[1],q[0],q[5])
qc.ccx(q[5],q[4],q[0])
qc.u1(0.35457,q[2])
qc.u2(2.18697,3.00497,q[3])
qc.u3(1.72533,0.44966,0.48349,q[0])
qc.u2(0.06206,5.77173,q[5])
qc.u3(2.57204,2.91509,5.62587,q[5])
qc.u3(2.81667,0.01619,3.4625,q[2])
qc.u2(0.50215,0.34647,q[2])
qc.cx(q[0],q[5])
qc.u3(0.34562,3.56521,3.4941,q[3])
qc.u1(0.63716,q[2])
qc.u2(4.76881,3.12693,q[3])
qc.u3(1.91412,1.63484,2.12681,q[4])
qc.cx(q[3],q[2])
qc.u1(4.26764,q[0])
qc.u2(1.55436,0.81728,q[2])
qc.u3(0.09449,4.8808,0.05189,q[4])
qc.cx(q[3],q[0])
qc.ccx(q[1],q[3],q[4])
qc.ccx(q[4],q[2],q[1])
qc.u3(2.77167,5.73927,2.22963,q[4])
qc.cx(q[5],q[2])
qc.u1(0.22086,q[2])
qc.cx(q[3],q[1])
qc.u3(1.96129,3.50397,5.46766,q[4])
qc.u2(4.55449,2.57273,q[5])
qc.u1(3.10332,q[5])
qc.u2(1.09164,4.57746,q[5])
qc.u3(0.62267,0.77943,6.26442,q[4])
qc.cx(q[2],q[5])
qc.u1(6.25025,q[1])
qc.cx(q[1],q[4])
qc.ccx(q[2],q[3],q[5])
qc.u3(0.11698,2.6624,0.08345,q[4])
qc.ccx(q[4],q[3],q[2])
qc.ccx(q[4],q[3],q[0])
qc.u3(1.18218,3.79728,2.94653,q[2])
qc.u1(3.19863,q[5])
qc.u3(3.07905,5.22563,2.23214,q[5])
qc.cx(q[5],q[4])
qc.u1(3.82903,q[3])
qc.ccx(q[5],q[3],q[1])
qc.u3(1.94348,0.71651,3.21059,q[3])
qc.u2(4.07651,4.43701,q[3])
qc.ccx(q[1],q[2],q[5])
qc.ccx(q[4],q[1],q[0])
qc.ccx(q[1],q[4],q[5])
qc.u3(0.86115,5.9186,1.2288,q[2])
qc.u3(1.66831,4.38404,1.08651,q[5])
qc.u1(5.67099,q[2])
qc.u3(0.67227,0.15311,5.5005,q[3])
qc.ccx(q[0],q[4],q[1])
qc.cx(q[5],q[0])
qc.u3(1.06993,3.01626,1.56112,q[2])
qc.ccx(q[5],q[0],q[2])
qc.cx(q[2],q[1])
qc.ccx(q[5],q[0],q[2])
qc.ccx(q[3],q[4],q[2])
qc.u2(1.21759,6.15254,q[3])
qc.cx(q[4],q[5])
qc.cx(q[1],q[4])
qc.ccx(q[4],q[3],q[5])
qc.u2(5.61633,0.80027,q[0])
qc.u2(5.84849,5.14258,q[1])
qc.ccx(q[3],q[4],q[0])
qc.ccx(q[2],q[5],q[0])
qc.u1(4.14053,q[4])
qc.u3(2.33877,2.96816,4.66128,q[4])
qc.cx(q[4],q[3])
qc.u1(1.17778,q[0])
qc.u2(0.23056,2.92671,q[3])
qc.u1(0.93358,q[5])
qc.u1(3.71205,q[5])
qc.ccx(q[2],q[3],q[0])
qc.ccx(q[5],q[2],q[4])
qc.cx(q[5],q[1])
qc.cx(q[1],q[3])
qc.cx(q[0],q[2])
qc.cx(q[5],q[1])
qc.ccx(q[4],q[1],q[0])
qc.u2(0.71527,4.62158,q[3])
qc.u3(2.36835,5.13578,2.57466,q[4])
qc.cx(q[2],q[1])
qc.u3(1.76799,5.12221,5.27562,q[3])
qc.u1(5.2069,q[0])
qc.u2(2.12573,3.99357,q[4])
qc.ccx(q[1],q[0],q[5])
qc.u3(0.83414,5.27191,2.81114,q[3])
qc.ccx(q[4],q[2],q[1])
qc.cx(q[5],q[0])
qc.u3(0.26107,0.60488,3.06455,q[4])
qc.cx(q[5],q[3])
qc.ccx(q[4],q[0],q[1])
qc.u1(3.06329,q[2])
qc.u1(1.45483,q[1])
qc.u2(4.38848,3.4579,q[0])
qc.u2(5.77363,5.2691,q[5])
qc.u3(1.59278,5.8313,1.05817,q[4])
qc.u3(2.35411,1.70237,6.09435,q[5])
qc.u2(6.05337,2.7194,q[1])
qc.u1(1.02818,q[5])
qc.u1(5.55406,q[4])
qc.u2(3.55343,5.79462,q[4])
qc.ccx(q[1],q[0],q[4])
qc.cx(q[4],q[1])
qc.cx(q[4],q[0])
qc.ccx(q[5],q[2],q[4])
qc.ccx(q[2],q[5],q[1])
qc.ccx(q[0],q[2],q[5])
qc.u2(1.08978,3.39275,q[5])
qc.u1(4.55394,q[0])
qc.cx(q[3],q[1])
qc.u2(3.07665,5.29115,q[3])
qc.u3(0.11982,2.47609,1.43556,q[2])
qc.u1(1.34954,q[4])
qc.ccx(q[4],q[0],q[3])
qc.ccx(q[5],q[0],q[3])
qc.u1(3.18585,q[1])
qc.ccx(q[5],q[1],q[2])
qc.u1(3.61691,q[2])
qc.cx(q[1],q[3])
qc.u2(5.86558,5.71059,q[2])
qc.u2(0.42919,5.96955,q[3])
qc.u2(5.27614,5.32435,q[3])
qc.u2(0.5972,0.32632,q[4])
qc.u1(3.52032,q[1])
qc.cx(q[4],q[0])
qc.ccx(q[0],q[3],q[4])
qc.cx(q[1],q[4])
qc.cx(q[0],q[5])
qc.u2(2.27473,3.78554,q[0])
qc.u3(2.02512,2.80709,0.41038,q[4])
qc.u3(1.05086,0.87953,6.17405,q[5])
qc.cx(q[1],q[3])
qc.u1(3.7748,q[2])
qc.cx(q[1],q[4])
qc.u3(0.65656,3.7685,3.79485,q[2])
qc.u2(5.27918,2.46796,q[1])
qc.u3(0.54156,3.83872,3.29075,q[0])
qc.u3(1.09591,0.66123,0.99173,q[2])
qc.u2(4.38849,4.91118,q[2])
qc.u3(3.1272,4.59289,4.26678,q[5])
qc.u1(5.70687,q[4])
qc.ccx(q[5],q[4],q[2])
qc.u3(0.04557,4.7984,1.01454,q[1])
qc.ccx(q[3],q[1],q[5])
qc.cx(q[1],q[3])
qc.u1(5.32249,q[0])
qc.u2(1.32286,5.78035,q[2])
qc.u3(1.61989,3.72169,3.52589,q[3])
qc.u2(3.11759,1.62551,q[3])
qc.u1(0.06175,q[2])
qc.u3(1.69089,0.01774,3.08455,q[0])
qc.u1(3.73986,q[4])
qc.u3(0.83939,4.4429,5.04943,q[4])
qc.u3(1.40354,4.14529,4.09315,q[4])
qc.ccx(q[1],q[5],q[3])
qc.u2(2.67848,5.56464,q[2])
qc.u2(2.28059,4.91182,q[4])
qc.u2(4.27833,4.43953,q[4])
qc.cx(q[0],q[2])
qc.u2(2.14285,3.48927,q[3])
qc.u3(0.74289,4.30079,4.92011,q[3])
qc.u3(2.17433,4.67873,1.89501,q[0])
qc.cx(q[1],q[3])
qc.u3(2.2749,1.8392,5.8103,q[5])
qc.u2(3.45673,1.15542,q[5])
qc.u3(1.48288,6.01882,2.26682,q[5])
qc.u2(2.15738,2.76479,q[3])
qc.u3(0.86137,3.54167,3.66978,q[5])
qc.cx(q[3],q[5])
qc.ccx(q[1],q[5],q[2])
qc.u3(0.69559,1.62595,0.55892,q[1])
qc.u2(4.13188,4.291,q[3])
qc.cx(q[1],q[5])
qc.u2(3.79507,5.00591,q[3])
qc.cx(q[1],q[2])
qc.u1(4.70655,q[4])
qc.u1(3.44611,q[0])
qc.u3(1.08414,2.04519,2.46877,q[2])
qc.u3(2.0444,5.7022,2.43757,q[5])
qc.u1(0.62644,q[2])
qc.u2(3.1191,0.18204,q[3])
qc.cx(q[4],q[1])
qc.u3(2.00223,0.5265,0.29002,q[2])
qc.ccx(q[0],q[4],q[3])
qc.cx(q[0],q[1])
qc.cx(q[0],q[3])
qc.u1(1.07236,q[4])
qc.u3(2.36029,5.17902,4.4276,q[4])
qc.u1(5.77969,q[2])
qc.ccx(q[2],q[5],q[0])
qc.u3(1.32855,0.31046,0.68509,q[1])
qc.ccx(q[1],q[0],q[5])
qc.u3(1.24312,4.97483,2.81695,q[5])
qc.u2(3.66563,0.416,q[0])
qc.u2(2.8661,4.50913,q[1])
qc.u2(4.58913,2.1322,q[1])
qc.cx(q[5],q[0])
qc.u2(0.12542,5.43256,q[2])
qc.ccx(q[5],q[0],q[1])
qc.ccx(q[2],q[1],q[4])
qc.cx(q[0],q[5])
qc.u2(1.51206,2.26882,q[4])
qc.u3(0.33432,0.59609,6.12272,q[4])
qc.cx(q[4],q[1])
qc.u1(1.53831,q[1])
qc.u2(2.42025,5.04748,q[5])
qc.ccx(q[3],q[5],q[0])
qc.u3(2.50058,3.57158,1.50063,q[1])
qc.cx(q[2],q[5])
qc.u1(4.77725,q[4])
qc.cx(q[2],q[5])
qc.u1(0.75623,q[5])
qc.u3(0.24886,4.75531,5.1119,q[3])
qc.ccx(q[1],q[4],q[0])
qc.u3(3.068,5.11949,0.29663,q[2])
qc.ccx(q[1],q[3],q[5])
qc.u1(3.3893,q[5])
qc.cx(q[5],q[2])
qc.u3(0.45622,3.62401,2.58638,q[1])
qc.ccx(q[0],q[2],q[1])
qc.ccx(q[3],q[4],q[1])
qc.u3(1.67881,2.83734,5.41345,q[1])
qc.u2(3.82662,6.09117,q[3])
qc.u2(0.50614,1.47998,q[5])
qc.u3(0.90224,3.12529,1.18699,q[4])
qc.ccx(q[2],q[1],q[3])
qc.u2(2.47477,0.49268,q[0])
qc.u1(2.85273,q[2])
qc.cx(q[3],q[5])
qc.cx(q[2],q[5])
qc.u2(3.40114,4.34766,q[0])
qc.u2(3.05942,1.73851,q[1])
qc.ccx(q[3],q[5],q[1])
qc.u3(0.76488,0.61974,5.48674,q[0])
qc.u1(5.66695,q[4])
qc.cx(q[1],q[4])
qc.u1(4.92242,q[1])
qc.u2(2.21712,6.15996,q[4])
qc.cx(q[3],q[0])
qc.cx(q[3],q[5])
qc.ccx(q[5],q[3],q[4])
qc.u2(2.01461,2.54102,q[3])
qc.u3(0.85111,4.4039,0.56204,q[1])
qc.u3(0.83774,4.73791,2.39825,q[5])
qc.u2(1.97272,2.82987,q[4])
qc.u1(3.84844,q[0])
qc.ccx(q[2],q[0],q[3])
qc.u1(2.91293,q[5])
qc.u1(4.38488,q[1])
qc.u1(0.72882,q[5])
qc.u1(5.99561,q[1])
qc.u3(0.43105,5.90309,3.22662,q[3])
qc.u1(3.41769,q[0])
qc.u1(4.37479,q[1])
qc.u2(3.13328,1.52232,q[1])
qc.u3(2.10233,4.98991,4.41781,q[1])
qc.u2(1.17277,4.43307,q[3])
qc.u1(0.32041,q[1])
qc.cx(q[5],q[3])
qc.ccx(q[0],q[5],q[3])
qc.cx(q[4],q[0])
qc.u3(2.24437,3.33705,5.84188,q[4])
qc.u3(3.12448,3.48528,0.34651,q[2])
qc.u1(4.64308,q[0])
qc.ccx(q[3],q[1],q[5])
qc.u1(2.81116,q[1])
qc.u3(1.09451,1.54509,4.76027,q[5])
qc.cx(q[4],q[3])
qc.u2(2.00172,4.02229,q[0])
qc.u1(2.86871,q[4])
qc.u1(3.73436,q[3])
qc.u3(1.41821,2.74316,5.9347,q[2])
qc.u3(2.19878,5.18788,0.58802,q[0])
qc.ccx(q[4],q[5],q[1])
qc.cx(q[5],q[4])
qc.cx(q[2],q[0])
qc.ccx(q[2],q[1],q[5])
qc.cx(q[2],q[4])
qc.u2(5.16602,2.89907,q[1])
qc.u2(3.34318,5.27816,q[3])
qc.u1(1.14131,q[3])
qc.ccx(q[3],q[1],q[4])
qc.cx(q[0],q[3])
qc.ccx(q[4],q[2],q[0])
qc.u3(0.74078,1.1748,6.10449,q[5])
qc.ccx(q[2],q[3],q[0])
qc.u2(0.57123,5.8617,q[3])
qc.u2(0.56399,2.92963,q[3])
qc.u3(0.89181,4.06296,1.58395,q[1])
qc.u1(5.21561,q[4])
qc.u2(1.21606,0.59032,q[0])
qc.ccx(q[1],q[5],q[0])
qc.u3(2.03371,5.18116,4.49457,q[3])
qc.cx(q[3],q[5])
qc.u1(2.06729,q[0])
qc.cx(q[5],q[4])
qc.ccx(q[2],q[5],q[4])
qc.u2(3.66995,4.52116,q[1])
qc.u1(5.19592,q[5])
qc.u3(0.23619,1.30677,5.47386,q[3])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
