import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(5)
c = ClassicalRegister(5)
qc = QuantumCircuit(q, c)
qc.cx(q[0],q[2])
qc.ccx(q[2],q[1],q[4])
qc.cx(q[2],q[3])
qc.u3(2.12307,5.1989,4.00166,q[0])
qc.cx(q[1],q[3])
qc.u1(1.76807,q[1])
qc.ccx(q[4],q[0],q[1])
qc.u1(5.48552,q[2])
qc.ccx(q[3],q[1],q[4])
qc.u1(0.05566,q[1])
qc.u2(3.59486,4.21442,q[2])
qc.u2(5.61443,3.42727,q[3])
qc.u2(0.48313,4.6471,q[3])
qc.ccx(q[1],q[4],q[0])
qc.u2(2.59704,4.20165,q[1])
qc.u3(1.66293,2.62501,4.68668,q[1])
qc.u2(1.36386,1.67598,q[3])
qc.u1(2.04047,q[1])
qc.ccx(q[2],q[1],q[4])
qc.u2(5.61156,5.99451,q[3])
qc.cx(q[2],q[1])
qc.u3(0.65246,4.97975,0.91036,q[1])
qc.u2(0.91552,3.06323,q[0])
qc.ccx(q[0],q[3],q[4])
qc.u3(1.0184,1.31247,4.93602,q[4])
qc.ccx(q[2],q[4],q[1])
qc.ccx(q[1],q[4],q[3])
qc.ccx(q[0],q[1],q[3])
qc.u1(1.33896,q[4])
qc.cx(q[0],q[3])
qc.u2(0.67322,1.03334,q[3])
qc.u1(4.99576,q[3])
qc.u3(1.49876,0.77941,1.48794,q[0])
qc.u3(0.25174,4.03457,3.06531,q[0])
qc.u2(3.02809,1.98302,q[3])
qc.u3(2.37929,2.26062,4.04436,q[4])
qc.ccx(q[2],q[1],q[0])
qc.u1(0.68499,q[2])
qc.cx(q[3],q[0])
qc.u2(6.04504,2.5037,q[4])
qc.u2(2.47997,5.94153,q[0])
qc.ccx(q[0],q[4],q[1])
qc.u1(3.17366,q[0])
qc.u1(0.72492,q[2])
qc.u3(2.43479,0.08063,2.47232,q[0])
qc.u1(0.75751,q[1])
qc.cx(q[2],q[0])
qc.u2(3.02182,2.70026,q[0])
qc.ccx(q[4],q[1],q[2])
qc.u3(2.48136,4.19459,1.53385,q[4])
qc.cx(q[3],q[4])
qc.u3(0.43454,5.9321,3.42883,q[3])
qc.u1(5.27518,q[0])
qc.u3(1.15349,3.79124,1.71582,q[1])
qc.ccx(q[3],q[1],q[4])
qc.cx(q[3],q[4])
qc.u1(0.37848,q[0])
qc.u2(5.13423,2.61928,q[0])
qc.u1(1.63554,q[3])
qc.u3(0.76501,0.516,4.66686,q[3])
qc.u3(1.13633,0.49235,2.14171,q[1])
qc.u2(4.94996,2.23269,q[0])
qc.u1(0.91898,q[4])
qc.u2(0.1612,4.4163,q[3])
qc.u2(0.59698,0.8987,q[2])
qc.u1(5.32676,q[4])
qc.cx(q[0],q[1])
qc.u3(1.12779,6.06537,5.54474,q[0])
qc.u1(5.46452,q[4])
qc.u2(1.9917,0.90534,q[1])
qc.u1(2.90032,q[0])
qc.u1(6.03231,q[4])
qc.u3(0.73931,0.59058,1.27161,q[0])
qc.cx(q[2],q[3])
qc.u3(2.04359,3.15551,0.81093,q[2])
qc.ccx(q[0],q[1],q[4])
qc.u1(4.87968,q[2])
qc.u1(2.30231,q[1])
qc.ccx(q[3],q[2],q[1])
qc.cx(q[3],q[2])
qc.u1(5.05009,q[1])
qc.u3(0.36588,0.47665,4.40241,q[1])
qc.u1(2.24686,q[4])
qc.u1(1.49499,q[4])
qc.u1(0.35468,q[0])
qc.cx(q[3],q[1])
qc.cx(q[2],q[4])
qc.cx(q[4],q[1])
qc.u2(6.20396,3.09661,q[3])
qc.cx(q[3],q[1])
qc.cx(q[2],q[3])
qc.u1(1.91635,q[4])
qc.u2(2.79302,3.06263,q[4])
qc.u3(3.11087,6.15987,5.69368,q[2])
qc.ccx(q[1],q[4],q[3])
qc.u3(1.53775,5.43011,3.26664,q[4])
qc.cx(q[3],q[4])
qc.u1(0.27166,q[0])
qc.u2(1.69214,5.54484,q[3])
qc.cx(q[1],q[3])
qc.u1(4.60943,q[1])
qc.ccx(q[3],q[0],q[2])
qc.u1(1.30872,q[4])
qc.u1(6.04787,q[0])
qc.u3(1.86157,3.57954,0.82166,q[2])
qc.ccx(q[2],q[4],q[1])
qc.u1(0.06091,q[0])
qc.cx(q[0],q[2])
qc.u2(3.55238,3.82283,q[2])
qc.cx(q[4],q[1])
qc.ccx(q[1],q[0],q[4])
qc.u2(1.86251,2.64557,q[3])
qc.u3(1.79457,5.45576,4.65528,q[2])
qc.cx(q[0],q[3])
qc.u2(0.01034,1.97718,q[0])
qc.cx(q[2],q[0])
qc.u3(0.20826,5.96236,1.19361,q[2])
qc.ccx(q[3],q[1],q[0])
qc.cx(q[3],q[4])
qc.ccx(q[1],q[3],q[0])
qc.cx(q[2],q[3])
qc.u3(1.69915,1.60829,2.68682,q[3])
qc.ccx(q[3],q[1],q[0])
qc.u2(1.48594,3.51418,q[4])
qc.u3(0.72011,2.92616,2.51673,q[3])
qc.u3(1.37733,3.0733,2.90941,q[0])
qc.cx(q[0],q[3])
qc.u2(2.69749,5.95596,q[1])
qc.ccx(q[4],q[3],q[2])
qc.ccx(q[1],q[3],q[4])
qc.ccx(q[3],q[2],q[4])
qc.ccx(q[1],q[2],q[3])
qc.cx(q[2],q[3])
qc.u2(1.16782,1.78776,q[1])
qc.u3(1.84581,6.16357,6.17191,q[3])
qc.cx(q[0],q[3])
qc.u3(2.32703,3.78205,0.81156,q[1])
qc.u3(1.79885,4.1628,4.45119,q[1])
qc.cx(q[4],q[1])
qc.ccx(q[4],q[2],q[0])
qc.ccx(q[4],q[1],q[0])
qc.ccx(q[3],q[4],q[0])
qc.u2(3.80818,4.3647,q[2])
qc.cx(q[2],q[3])
qc.cx(q[4],q[3])
qc.cx(q[0],q[4])
qc.u1(0.02928,q[4])
qc.cx(q[1],q[3])
qc.ccx(q[1],q[2],q[3])
qc.ccx(q[1],q[2],q[0])
qc.u2(5.6294,4.61754,q[0])
qc.ccx(q[1],q[3],q[4])
qc.cx(q[4],q[0])
qc.u2(1.45764,1.90141,q[2])
qc.u3(2.2997,2.20597,0.4573,q[2])
qc.u3(1.8251,0.89639,4.37887,q[3])
qc.u1(5.12207,q[1])
qc.ccx(q[0],q[1],q[2])
qc.cx(q[1],q[0])
qc.u2(6.11048,4.3983,q[2])
qc.cx(q[4],q[1])
qc.u3(2.218,1.28689,3.01576,q[1])
qc.u3(2.12581,0.17112,1.6236,q[1])
qc.u1(5.98525,q[0])
qc.u1(2.38827,q[2])
qc.u2(1.28384,5.79668,q[0])
qc.u2(3.20987,2.17963,q[2])
qc.u2(3.56374,0.79521,q[0])
qc.cx(q[2],q[1])
qc.u2(4.34105,0.159,q[1])
qc.u2(4.61869,1.08704,q[0])
qc.u2(3.17841,0.59607,q[2])
qc.cx(q[0],q[2])
qc.cx(q[2],q[3])
qc.u3(2.03192,5.80368,4.39135,q[4])
qc.u3(2.87303,5.42488,3.01869,q[1])
qc.cx(q[3],q[2])
qc.u3(2.53094,1.70986,0.92101,q[4])
qc.ccx(q[0],q[1],q[4])
qc.u3(1.27827,2.85833,3.81194,q[2])
qc.u3(2.11173,1.05737,5.66958,q[2])
qc.ccx(q[4],q[1],q[2])
qc.u2(3.74903,3.12793,q[2])
qc.u3(2.60415,0.61205,5.91491,q[1])
qc.u1(2.37079,q[3])
qc.u1(2.05353,q[1])
qc.u2(4.58214,3.41607,q[4])
qc.cx(q[4],q[1])
qc.u2(0.81667,6.09218,q[0])
qc.u3(0.83267,1.12511,4.00533,q[3])
qc.u2(1.11649,1.40426,q[1])
qc.u1(1.13108,q[2])
qc.u2(4.00145,4.19361,q[1])
qc.cx(q[0],q[2])
qc.u1(5.29238,q[0])
qc.u2(0.86834,2.83891,q[1])
qc.ccx(q[4],q[1],q[0])
qc.cx(q[2],q[4])
qc.u1(0.02917,q[2])
qc.cx(q[4],q[1])
qc.u2(4.59023,4.77483,q[2])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
