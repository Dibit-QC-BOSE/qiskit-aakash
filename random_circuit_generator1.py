import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(6)
c = ClassicalRegister(6)
qc = QuantumCircuit(q, c)
qc.cx(q[0],q[3])
qc.u3(2.94654,1.45777,3.2182,q[2])
qc.u3(0.63679,0.75708,4.74916,q[4])
qc.u3(0.28551,6.25264,5.04452,q[0])
qc.cx(q[0],q[4])
qc.u1(3.41874,q[1])
qc.cx(q[3],q[0])
qc.ccx(q[0],q[1],q[2])
qc.u1(4.89656,q[0])
qc.u3(0.26805,0.16228,2.92976,q[1])
qc.u1(4.6635,q[0])
qc.ccx(q[4],q[2],q[1])
qc.u2(5.79271,3.4889,q[2])
qc.cx(q[5],q[0])
qc.u3(0.7347,2.18375,0.66429,q[3])
qc.u3(3.10456,2.72768,0.0605,q[2])
qc.cx(q[0],q[3])
qc.ccx(q[4],q[2],q[0])
qc.ccx(q[5],q[0],q[2])
qc.u3(1.46181,3.12861,0.21979,q[3])
qc.u3(2.05501,2.4981,6.23472,q[4])
qc.u2(3.9802,4.53687,q[2])
qc.u2(5.13765,0.86948,q[3])
qc.cx(q[5],q[3])
qc.u2(0.19428,2.68794,q[0])
qc.cx(q[2],q[4])
qc.ccx(q[5],q[0],q[2])
qc.u1(2.5929,q[5])
qc.ccx(q[2],q[5],q[3])
qc.u1(0.10795,q[0])
qc.u1(4.21154,q[5])
qc.u1(0.10538,q[4])
qc.cx(q[2],q[1])
qc.u2(1.7451,5.62989,q[2])
qc.u2(5.76664,4.50613,q[0])
qc.u2(0.6566,1.6799,q[4])
qc.ccx(q[0],q[1],q[4])
qc.ccx(q[1],q[4],q[0])
qc.u3(2.69971,0.32657,4.61271,q[4])
qc.u1(2.07922,q[5])
qc.u1(1.17332,q[1])
qc.cx(q[3],q[4])
qc.u2(2.66249,5.80632,q[5])
qc.u1(2.35782,q[5])
qc.u2(0.05291,2.44964,q[1])
qc.u3(2.7607,6.2624,3.0398,q[1])
qc.ccx(q[0],q[1],q[2])
qc.cx(q[5],q[2])
qc.u2(4.29994,1.46957,q[1])
qc.ccx(q[1],q[3],q[4])
qc.u1(0.02329,q[2])
qc.u3(0.42219,3.35742,3.07462,q[1])
qc.ccx(q[1],q[3],q[0])
qc.cx(q[5],q[3])
qc.ccx(q[5],q[2],q[1])
qc.u1(0.83002,q[1])
qc.u2(5.90993,0.08312,q[3])
qc.u2(6.07915,1.2177,q[0])
qc.u1(4.79527,q[5])
qc.ccx(q[3],q[5],q[4])
qc.ccx(q[3],q[5],q[2])
qc.ccx(q[3],q[5],q[0])
qc.cx(q[4],q[3])
qc.ccx(q[1],q[3],q[2])
qc.cx(q[4],q[3])
qc.u2(2.84441,2.92207,q[2])
qc.u3(1.63339,5.29828,2.93106,q[0])
qc.cx(q[2],q[3])
qc.ccx(q[5],q[4],q[1])
qc.ccx(q[3],q[4],q[2])
qc.u2(0.61248,1.60166,q[4])
qc.u1(5.085,q[3])
qc.ccx(q[2],q[4],q[5])
qc.u1(2.83357,q[4])
qc.ccx(q[5],q[4],q[2])
qc.u3(1.13406,0.12408,2.15795,q[5])
qc.cx(q[2],q[4])
qc.cx(q[1],q[2])
qc.u1(4.59547,q[0])
qc.cx(q[0],q[2])
qc.u3(1.67567,5.63875,1.59607,q[2])
qc.ccx(q[0],q[1],q[5])
qc.cx(q[1],q[0])
qc.u1(3.92999,q[4])
qc.u3(1.60615,4.022,2.01306,q[4])
qc.u3(2.03689,0.57209,6.27037,q[3])
qc.u1(6.21152,q[3])
qc.u2(1.43628,6.06429,q[3])
qc.u2(4.7865,1.41886,q[4])
qc.cx(q[3],q[4])
qc.u1(3.63005,q[3])
qc.u1(4.49116,q[5])
qc.u2(3.40039,3.41975,q[5])
qc.u1(1.80048,q[3])
qc.cx(q[5],q[1])
qc.u2(1.36203,3.80645,q[2])
qc.ccx(q[2],q[3],q[5])
qc.ccx(q[1],q[3],q[0])
qc.cx(q[2],q[5])
qc.u2(2.51003,4.15473,q[4])
qc.cx(q[0],q[5])
qc.u3(0.73612,0.13608,4.69069,q[4])
qc.u3(0.59117,4.41754,3.8688,q[4])
qc.cx(q[0],q[2])
qc.u3(0.57613,3.05066,2.53876,q[4])
qc.u1(5.99244,q[3])
qc.u1(5.23212,q[0])
qc.u2(0.76067,5.9696,q[5])
qc.u2(1.47885,4.13937,q[5])
qc.u1(4.15762,q[3])
qc.u1(5.03611,q[2])
qc.u2(2.77973,0.50593,q[4])
qc.ccx(q[5],q[2],q[1])
qc.u1(2.15487,q[3])
qc.ccx(q[0],q[4],q[2])
qc.u3(0.98084,3.22582,6.00856,q[2])
qc.u2(3.10356,4.27412,q[1])
qc.cx(q[1],q[4])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
