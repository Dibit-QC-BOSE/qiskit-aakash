import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(7)
c = ClassicalRegister(7)
qc = QuantumCircuit(q, c)
qc.cx(q[5],q[2])
qc.u1(6.03961,q[2])
qc.cx(q[3],q[1])
qc.u1(1.65338,q[0])
qc.u3(2.4557,2.00432,2.7259,q[1])
qc.u2(5.61476,0.71237,q[0])
qc.cx(q[6],q[2])
qc.u2(3.96744,0.37681,q[2])
qc.u3(0.10819,5.036,3.722,q[1])
qc.u1(5.43531,q[0])
qc.u1(2.93573,q[0])
qc.cx(q[4],q[3])
qc.cx(q[3],q[1])
qc.u1(3.14779,q[2])
qc.cx(q[3],q[6])
qc.cx(q[1],q[3])
qc.u3(2.02561,4.75307,3.47992,q[5])
qc.u3(2.21007,0.4644,0.13815,q[4])
qc.ccx(q[1],q[4],q[5])
qc.u3(0.45524,4.52261,2.15938,q[6])
qc.u1(4.5413,q[1])
qc.cx(q[0],q[6])
qc.ccx(q[0],q[5],q[3])
qc.u1(3.67734,q[0])
qc.u1(4.36463,q[3])
qc.u3(2.9911,3.37578,4.0343,q[2])
qc.ccx(q[1],q[0],q[6])
qc.u2(2.76409,1.29945,q[0])
qc.ccx(q[1],q[4],q[3])
qc.cx(q[4],q[3])
qc.cx(q[5],q[4])
qc.ccx(q[6],q[1],q[5])
qc.u3(1.70724,0.06961,3.30686,q[4])
qc.ccx(q[2],q[5],q[4])
qc.u2(4.84959,2.00412,q[1])
qc.cx(q[1],q[0])
qc.ccx(q[5],q[0],q[4])
qc.cx(q[2],q[6])
qc.u1(0.86981,q[2])
qc.u2(5.99423,4.21878,q[1])
qc.ccx(q[1],q[6],q[2])
qc.u1(0.08049,q[2])
qc.ccx(q[5],q[4],q[3])
qc.cx(q[5],q[0])
qc.ccx(q[6],q[2],q[3])
qc.cx(q[6],q[0])
qc.u3(0.25261,3.34142,2.22736,q[4])
qc.u3(3.08966,1.51744,2.94638,q[4])
qc.cx(q[0],q[6])
qc.u1(2.15369,q[4])
qc.u3(2.80821,4.2427,6.02914,q[0])
qc.u2(0.18664,3.1931,q[6])
qc.u3(1.24755,5.21162,3.72926,q[6])
qc.u3(0.91135,1.92774,3.27048,q[2])
qc.u1(5.8234,q[0])
qc.u3(0.00456,1.2358,0.08999,q[2])
qc.u2(1.35902,5.77819,q[6])
qc.u1(1.12859,q[0])
qc.ccx(q[4],q[1],q[2])
qc.u1(5.73506,q[6])
qc.u2(2.56894,4.18352,q[2])
qc.u2(2.30395,2.11082,q[0])
qc.u1(1.57269,q[4])
qc.ccx(q[5],q[4],q[1])
qc.u2(2.73148,2.91228,q[0])
qc.cx(q[0],q[1])
qc.u3(1.24432,0.47347,1.27125,q[4])
qc.u3(2.01696,1.44521,0.16065,q[0])
qc.u2(2.07283,3.66816,q[6])
qc.ccx(q[1],q[3],q[0])
qc.u1(0.75934,q[0])
qc.u2(5.46832,4.90798,q[3])
qc.u2(3.28473,0.2739,q[0])
qc.u3(2.94523,1.45825,1.81883,q[2])
qc.u2(2.27814,1.11632,q[3])
qc.ccx(q[2],q[3],q[5])
qc.cx(q[4],q[6])
qc.cx(q[1],q[6])
qc.u1(5.58707,q[2])
qc.u1(0.01907,q[5])
qc.cx(q[5],q[1])
qc.u1(4.38435,q[3])
qc.ccx(q[2],q[1],q[3])
qc.cx(q[3],q[6])
qc.ccx(q[4],q[5],q[6])
qc.ccx(q[6],q[2],q[3])
qc.u1(5.18938,q[3])
qc.ccx(q[0],q[4],q[3])
qc.u3(1.79324,3.39313,5.75579,q[0])
qc.u3(3.09788,6.15488,0.29483,q[4])
qc.cx(q[0],q[3])
qc.u2(2.9959,6.19601,q[4])
qc.cx(q[4],q[0])
qc.u3(1.43577,3.32641,0.59139,q[3])
qc.ccx(q[3],q[5],q[1])
qc.u1(5.92599,q[3])
qc.u1(3.32278,q[0])
qc.cx(q[0],q[5])
qc.u3(1.89227,5.94536,3.23897,q[5])
qc.u1(3.08861,q[4])
qc.cx(q[6],q[1])
qc.cx(q[4],q[2])
qc.u2(1.45915,3.77907,q[6])
qc.ccx(q[0],q[6],q[2])
qc.ccx(q[3],q[4],q[5])
qc.ccx(q[5],q[3],q[6])
qc.u1(1.35451,q[0])
qc.cx(q[1],q[6])
qc.ccx(q[5],q[3],q[6])
qc.cx(q[2],q[5])
qc.cx(q[3],q[1])
qc.ccx(q[2],q[5],q[6])
qc.u1(1.17792,q[0])
qc.cx(q[5],q[4])
qc.u3(2.0201,1.98836,5.38773,q[6])
qc.u2(1.86978,3.35012,q[2])
qc.ccx(q[4],q[6],q[5])
qc.ccx(q[0],q[3],q[2])
qc.u1(4.91162,q[5])
qc.cx(q[3],q[1])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
