import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
#backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(8)
c = ClassicalRegister(8)
qc = QuantumCircuit(q, c)
qc.ccx(q[4],q[7],q[0])
qc.ccx(q[2],q[7],q[4])
qc.ccx(q[0],q[2],q[1])
qc.ccx(q[1],q[2],q[6])
qc.u3(2.12641,0.57356,5.94801,q[3])
qc.u2(3.28567,1.58175,q[1])
qc.u1(5.87141,q[1])
qc.u3(1.68757,3.10019,1.62743,q[6])
qc.u3(2.37225,2.71321,3.36293,q[7])
qc.u1(4.90887,q[0])
qc.ccx(q[3],q[2],q[6])
qc.u3(0.3899,5.98642,5.0876,q[4])
qc.cx(q[5],q[2])
qc.cx(q[7],q[5])
qc.u3(1.53428,0.33832,5.60446,q[5])
qc.u3(3.09798,3.9054,2.46678,q[2])
qc.u2(1.48368,4.86432,q[4])
qc.ccx(q[1],q[3],q[2])
qc.u2(1.05557,4.88873,q[3])
qc.u3(0.61292,3.45286,0.88733,q[1])
qc.cx(q[2],q[0])
qc.cx(q[5],q[0])
qc.u3(3.01193,1.64029,2.00292,q[6])
qc.cx(q[0],q[6])
qc.u2(3.97648,5.823,q[7])
qc.cx(q[3],q[6])
qc.cx(q[0],q[3])
qc.u1(5.56404,q[0])
qc.cx(q[7],q[2])
qc.u3(2.15112,4.28963,3.32213,q[5])
qc.ccx(q[4],q[2],q[1])
qc.cx(q[7],q[5])
qc.u1(5.03664,q[3])
qc.cx(q[2],q[6])
qc.u2(3.19409,4.51264,q[5])
qc.u1(0.19334,q[6])
qc.cx(q[3],q[6])
qc.u1(2.84437,q[0])
qc.ccx(q[6],q[3],q[5])
qc.ccx(q[3],q[6],q[7])
qc.ccx(q[1],q[5],q[6])
qc.u3(1.21153,5.09604,3.3176,q[0])
qc.u2(1.58863,4.12432,q[6])
qc.u1(4.85196,q[7])
qc.u3(0.5452,6.24704,1.19952,q[3])
qc.u2(2.36286,3.79209,q[6])
qc.u1(4.51068,q[2])
qc.ccx(q[6],q[0],q[2])
qc.u3(0.88856,4.31053,1.80287,q[5])
qc.ccx(q[3],q[1],q[7])
qc.u2(3.85705,5.14667,q[7])
qc.u1(2.84411,q[6])
qc.u3(0.52605,4.06007,5.75659,q[2])
qc.u2(1.83537,4.77507,q[1])
qc.cx(q[3],q[7])
qc.u3(1.82368,0.65594,4.86942,q[0])
qc.u2(3.933,5.67751,q[4])
qc.u2(2.23941,1.56808,q[4])
qc.u3(0.44897,3.55928,6.1065,q[0])
qc.u1(3.32583,q[4])
qc.u2(5.87564,2.21011,q[1])
qc.ccx(q[5],q[6],q[2])
qc.u3(2.30748,0.75997,4.85292,q[5])
qc.cx(q[0],q[1])
qc.u2(3.83403,3.14673,q[7])
qc.u1(2.35002,q[7])
qc.u3(0.59999,4.74539,2.50365,q[1])
qc.cx(q[7],q[4])
qc.u1(2.96529,q[3])
qc.ccx(q[3],q[2],q[5])
qc.ccx(q[2],q[5],q[6])
qc.u2(2.85701,2.0053,q[4])
qc.u1(4.85894,q[4])
qc.cx(q[2],q[0])
qc.ccx(q[2],q[5],q[4])
qc.u1(0.65088,q[3])
qc.cx(q[3],q[4])
qc.ccx(q[3],q[0],q[4])
qc.ccx(q[7],q[3],q[5])
qc.u2(5.99141,3.92548,q[0])
qc.cx(q[2],q[0])
qc.u3(2.87049,2.0611,1.58185,q[2])
qc.u3(2.24497,4.61128,1.06815,q[0])
qc.u1(2.76578,q[5])
qc.cx(q[4],q[3])
qc.cx(q[4],q[6])
qc.u2(2.91569,1.65837,q[4])
qc.u3(2.29259,1.08534,1.04299,q[4])
qc.u3(2.5758,3.79183,5.10846,q[5])
qc.ccx(q[5],q[2],q[7])
qc.u3(2.58479,4.34688,6.16934,q[0])
qc.ccx(q[0],q[7],q[6])
qc.cx(q[3],q[5])
qc.u2(6.03841,0.55547,q[2])
qc.ccx(q[5],q[7],q[6])
qc.u1(1.91137,q[5])
qc.u1(3.66165,q[1])
qc.u2(5.99306,1.79745,q[6])
qc.u1(3.16765,q[5])
qc.ccx(q[4],q[1],q[0])
qc.ccx(q[3],q[7],q[0])
qc.cx(q[7],q[5])
qc.ccx(q[5],q[3],q[1])
qc.u2(3.68893,4.76905,q[5])
qc.u3(1.4309,0.57096,5.08202,q[7])
qc.cx(q[4],q[6])
qc.u1(1.04855,q[3])
qc.u2(3.17139,5.42697,q[4])
qc.cx(q[1],q[4])
qc.u1(1.16821,q[5])
qc.u1(0.84066,q[6])
qc.u3(0.7033,3.76611,2.96809,q[1])
qc.cx(q[6],q[1])
qc.cx(q[0],q[2])
qc.u3(1.31139,3.70957,2.81931,q[1])
qc.u2(4.19658,6.19897,q[0])
qc.cx(q[2],q[0])
qc.u3(1.66549,5.07228,2.20215,q[3])
qc.ccx(q[7],q[1],q[0])
qc.u2(4.35778,3.00627,q[0])
qc.cx(q[5],q[4])
qc.u1(2.20778,q[0])
qc.ccx(q[6],q[3],q[2])
qc.ccx(q[3],q[7],q[6])
qc.ccx(q[6],q[1],q[0])
qc.u1(2.63395,q[2])
qc.u1(1.87336,q[4])
qc.u1(1.914,q[1])
qc.cx(q[5],q[0])
qc.cx(q[6],q[2])
qc.cx(q[6],q[4])
qc.cx(q[0],q[2])
qc.u1(1.47223,q[5])
qc.cx(q[4],q[6])
qc.u2(0.56547,0.05228,q[5])
qc.u2(4.47622,3.10325,q[3])
qc.u1(0.56852,q[0])
qc.u1(0.30299,q[4])
qc.u1(4.79617,q[5])
qc.ccx(q[7],q[5],q[1])
qc.u2(6.02442,6.00944,q[0])
qc.u1(0.13582,q[0])
qc.u1(2.48525,q[4])
qc.u2(0.16131,5.06152,q[5])
qc.cx(q[4],q[2])
qc.cx(q[6],q[7])
qc.u1(5.94982,q[3])
qc.u1(2.56446,q[4])
qc.u3(0.44394,3.13915,0.56221,q[2])
qc.cx(q[6],q[2])
qc.u1(1.96629,q[2])
qc.u3(2.73937,5.49404,4.65737,q[3])
qc.u3(2.77614,1.64008,2.10249,q[0])
qc.ccx(q[5],q[3],q[0])
qc.u1(3.84919,q[0])
qc.u2(3.8103,0.12416,q[6])
qc.cx(q[4],q[0])
qc.ccx(q[2],q[1],q[4])
qc.u1(6.17507,q[0])
qc.ccx(q[0],q[4],q[5])
qc.cx(q[5],q[4])
qc.cx(q[0],q[1])
qc.cx(q[4],q[3])
qc.u2(0.70345,3.72909,q[5])
qc.u2(5.92457,4.23102,q[6])
qc.ccx(q[2],q[7],q[4])
qc.cx(q[2],q[4])
qc.u3(2.83497,2.49252,4.15701,q[2])
qc.u1(4.53034,q[6])
qc.u2(1.43174,0.2198,q[7])
qc.cx(q[0],q[6])
qc.ccx(q[4],q[7],q[1])
qc.cx(q[0],q[7])
qc.cx(q[6],q[2])
qc.cx(q[2],q[7])
qc.ccx(q[3],q[0],q[7])
qc.cx(q[0],q[3])
qc.u1(6.22698,q[5])
qc.u1(2.09831,q[3])
qc.u2(1.19748,5.713,q[3])
qc.u3(0.94972,3.95057,1.91409,q[2])
qc.u1(5.40857,q[1])
qc.u3(1.71888,5.75083,5.23354,q[4])
qc.u2(4.21662,5.17542,q[0])
qc.u1(0.64417,q[2])
qc.u2(6.1424,1.10848,q[5])
qc.u3(2.32255,2.77968,2.26415,q[5])
qc.u1(6.16252,q[3])
qc.u1(5.48632,q[2])
qc.u1(1.66381,q[0])
qc.cx(q[2],q[6])
qc.u2(2.45216,2.35649,q[2])
qc.ccx(q[1],q[2],q[6])
qc.cx(q[2],q[0])
qc.u2(4.52181,0.75421,q[5])
qc.cx(q[6],q[4])
qc.u1(5.15443,q[1])
qc.cx(q[0],q[5])
qc.u1(6.14478,q[5])
qc.cx(q[3],q[4])
qc.u3(2.96981,1.0917,1.53962,q[3])
qc.u3(0.17769,2.42602,0.86932,q[7])
qc.ccx(q[5],q[4],q[1])
qc.cx(q[2],q[0])
qc.u3(1.66293,4.61545,0.42348,q[7])
qc.u1(5.39245,q[3])
qc.u3(0.44393,0.1396,5.43056,q[5])
qc.u3(2.27713,6.0357,3.30277,q[2])
qc.ccx(q[6],q[1],q[0])
qc.u2(3.22758,2.65166,q[2])
qc.u2(3.49509,1.44846,q[4])
qc.u1(3.15422,q[0])
qc.u1(2.09579,q[4])
qc.u1(0.91699,q[1])
qc.cx(q[7],q[0])
qc.ccx(q[4],q[0],q[3])
qc.cx(q[7],q[4])
qc.u3(2.76443,2.03808,2.18189,q[4])
qc.u1(3.0022,q[7])
qc.ccx(q[7],q[4],q[6])
qc.ccx(q[0],q[7],q[4])
qc.ccx(q[5],q[3],q[0])
qc.cx(q[6],q[7])
qc.u1(2.177,q[5])
qc.u2(5.58257,6.14471,q[6])
qc.u3(2.53505,1.9319,5.93133,q[4])
qc.cx(q[7],q[2])
qc.ccx(q[4],q[1],q[5])
qc.u2(1.05833,2.34136,q[4])
qc.ccx(q[1],q[3],q[7])
qc.u2(4.75782,2.38035,q[7])
qc.u2(4.11079,4.22518,q[1])
qc.u2(2.50617,0.42405,q[6])
qc.u2(0.16946,2.86412,q[7])
qc.u2(3.11569,1.21254,q[3])
qc.u2(2.71598,0.64353,q[5])
qc.u3(2.41696,2.41549,5.24768,q[3])
qc.u2(5.03301,6.2356,q[7])
qc.u2(5.62081,1.10054,q[7])
qc.u1(0.32327,q[7])
qc.cx(q[1],q[0])
qc.u1(3.97429,q[5])
qc.u3(1.53878,0.57606,1.92084,q[0])
qc.u1(5.97642,q[6])
qc.cx(q[6],q[5])
qc.cx(q[7],q[1])
qc.u2(5.78686,5.40096,q[2])
qc.u3(1.55839,2.60319,0.08899,q[2])
qc.u2(2.18768,4.19386,q[6])
qc.u1(3.89407,q[2])
qc.u2(2.88779,5.65161,q[5])
qc.u3(0.44144,3.76076,5.42269,q[3])
qc.ccx(q[3],q[5],q[7])
qc.u1(3.69347,q[2])
qc.ccx(q[5],q[2],q[4])
qc.cx(q[5],q[4])
qc.u2(4.35504,4.84555,q[5])
qc.ccx(q[5],q[3],q[6])
qc.u3(3.00844,1.81053,5.08901,q[7])
qc.cx(q[2],q[3])
qc.cx(q[7],q[2])
qc.u2(0.37974,3.97893,q[1])
qc.u1(1.83138,q[3])
qc.u3(1.50594,1.62634,3.20805,q[1])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
#job = execute(circuits, backend2, **options)
#result = job.result()
#print(result)
"""a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') """
