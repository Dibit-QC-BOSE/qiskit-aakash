import numpy as np
import filecmp
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import BasicAer, execute
backend1 = BasicAer.get_backend('dm_simulator')
backend2 = BasicAer.get_backend('qasm_simulator')
options = {}
q = QuantumRegister(6)
c = ClassicalRegister(6)
qc = QuantumCircuit(q, c)
qc.u3(1.84341,0.33361,3.9976,q[3])
qc.cx(q[5],q[1])
qc.u3(0.48693,5.25751,0.42963,q[3])
qc.cx(q[5],q[2])
qc.ccx(q[3],q[2],q[0])
qc.u3(2.42438,4.55378,4.76482,q[3])
qc.ccx(q[0],q[4],q[1])
qc.u1(4.61612,q[1])
qc.u1(2.98061,q[4])
qc.u3(0.93547,1.26798,1.23901,q[1])
qc.u1(5.69292,q[2])
qc.cx(q[5],q[4])
qc.ccx(q[0],q[2],q[1])
qc.u3(0.73632,6.17356,3.6801,q[5])
qc.ccx(q[5],q[4],q[0])
qc.u1(3.9842,q[0])
qc.u2(6.1352,4.16285,q[2])
qc.ccx(q[0],q[1],q[4])
qc.ccx(q[3],q[2],q[0])
qc.u2(4.99301,0.24414,q[5])
qc.cx(q[0],q[4])
qc.cx(q[0],q[5])
qc.u1(5.02819,q[4])
qc.u2(4.04315,0.71297,q[0])
qc.cx(q[1],q[4])
qc.ccx(q[0],q[4],q[1])
qc.u3(2.67518,2.57585,1.4353,q[0])
qc.cx(q[5],q[4])
qc.u2(5.4316,4.58257,q[4])
qc.u2(3.78065,5.90196,q[0])
qc.u2(2.38308,3.83296,q[3])
qc.u2(3.90906,3.75067,q[3])
qc.ccx(q[0],q[4],q[5])
qc.u2(0.40849,0.77965,q[5])
qc.u2(0.0363,0.57988,q[4])
qc.ccx(q[0],q[1],q[3])
qc.u1(0.09543,q[5])
qc.u2(5.72493,2.26118,q[3])
qc.u2(6.09451,5.24347,q[4])
qc.cx(q[1],q[5])
qc.u3(1.61233,1.86316,5.80971,q[1])
qc.ccx(q[1],q[4],q[2])
qc.cx(q[4],q[3])
qc.u3(0.69168,4.29142,2.00398,q[4])
qc.u2(1.36674,5.79067,q[4])
qc.u1(4.1259,q[3])
qc.u2(1.01246,3.11892,q[2])
qc.cx(q[5],q[1])
qc.cx(q[4],q[3])
qc.cx(q[2],q[3])
qc.cx(q[5],q[2])
qc.u3(2.45946,4.13464,5.35649,q[1])
qc.u1(4.75848,q[4])
qc.cx(q[5],q[2])
qc.cx(q[2],q[1])
qc.u1(3.9742,q[3])
qc.ccx(q[3],q[0],q[1])
qc.u3(2.54194,4.31477,5.79731,q[5])
qc.ccx(q[4],q[2],q[0])
qc.cx(q[0],q[1])
qc.ccx(q[1],q[0],q[3])
qc.u1(4.5465,q[1])
qc.u1(5.87487,q[5])
qc.cx(q[4],q[1])
qc.ccx(q[5],q[0],q[4])
qc.u3(1.8689,4.7433,2.47092,q[5])
qc.ccx(q[5],q[3],q[4])
qc.u3(0.39114,0.77766,4.79033,q[2])
qc.u1(3.82936,q[4])
qc.ccx(q[3],q[2],q[4])
qc.u1(0.93871,q[2])
qc.cx(q[1],q[2])
qc.u2(0.78401,3.34234,q[4])
qc.u2(5.51355,1.8194,q[2])
qc.u2(5.8801,3.13031,q[3])
qc.u1(4.20195,q[4])
qc.u1(1.01563,q[0])
qc.u2(4.9997,0.89224,q[1])
qc.ccx(q[3],q[4],q[1])
qc.cx(q[4],q[3])
qc.ccx(q[4],q[5],q[2])
qc.cx(q[4],q[3])
qc.u1(4.17313,q[5])
qc.u1(0.92905,q[4])
qc.u3(1.305,2.86902,2.5323,q[1])
qc.cx(q[1],q[2])
qc.cx(q[3],q[1])
qc.u2(2.63372,3.2414,q[3])
qc.u1(3.51144,q[3])
qc.u3(0.34281,6.2667,5.27862,q[4])
qc.u2(5.60852,5.69482,q[4])
qc.u3(0.80225,1.21621,2.80928,q[4])
qc.ccx(q[5],q[0],q[1])
qc.ccx(q[4],q[3],q[2])
qc.cx(q[5],q[0])
qc.u3(1.98557,5.93321,5.13627,q[4])
qc.u3(1.74029,0.10008,5.71254,q[2])
qc.ccx(q[5],q[0],q[3])
qc.u3(0.01232,4.41352,4.96926,q[5])
qc.u3(1.73893,3.95005,1.58172,q[2])
qc.ccx(q[4],q[5],q[2])
qc.u1(3.51339,q[4])
qc.ccx(q[3],q[1],q[0])
qc.cx(q[2],q[1])
qc.cx(q[5],q[0])
qc.u2(2.40467,2.5556,q[2])
qc.u2(1.29589,3.0427,q[1])
qc.u3(0.67756,3.39769,4.80215,q[4])
qc.u1(0.05636,q[3])
qc.u3(2.56398,0.70306,0.26038,q[0])
qc.cx(q[2],q[0])
qc.cx(q[2],q[0])
qc.ccx(q[1],q[2],q[0])
qc.u1(0.21888,q[5])
qc.cx(q[0],q[3])
qc.cx(q[2],q[3])
qc.u3(2.34734,5.64955,2.3956,q[2])
qc.cx(q[4],q[0])
qc.u2(2.90764,2.5718,q[4])
qc.cx(q[1],q[0])
qc.ccx(q[4],q[0],q[3])
qc.u1(4.8112,q[0])
qc.cx(q[5],q[2])
qc.u3(0.77267,0.44315,5.44829,q[3])
qc.u2(5.19365,4.11412,q[4])
qc.u1(3.52108,q[4])
qc.u1(4.95074,q[2])
qc.u3(2.73784,2.17535,1.32966,q[5])
qc.ccx(q[4],q[0],q[3])
qc.ccx(q[0],q[2],q[5])
qc.cx(q[1],q[2])
qc.u3(2.50052,2.70568,0.60703,q[5])
qc.u1(2.53731,q[1])
qc.u2(0.63846,1.82498,q[5])
qc.ccx(q[1],q[0],q[4])
qc.ccx(q[5],q[3],q[1])
qc.u1(0.25637,q[3])
qc.u3(0.92637,4.49821,3.78431,q[5])
qc.ccx(q[0],q[3],q[1])
qc.u1(4.17492,q[3])
qc.u2(0.43793,5.89845,q[2])
qc.cx(q[3],q[2])
qc.u2(3.80202,5.63564,q[4])
qc.u1(0.8926,q[0])
qc.cx(q[2],q[4])
qc.ccx(q[2],q[4],q[3])
qc.u1(3.17965,q[5])
qc.ccx(q[5],q[3],q[4])
qc.u2(0.36048,1.49032,q[4])
qc.cx(q[5],q[3])
qc.u2(2.2404,2.03016,q[4])
qc.ccx(q[3],q[2],q[4])
qc.u1(4.3483,q[1])
qc.ccx(q[2],q[4],q[5])
qc.ccx(q[3],q[0],q[5])
qc.u3(2.87327,0.22396,2.29927,q[5])
qc.u2(5.51757,2.00825,q[3])
qc.u3(0.22184,4.06059,0.63162,q[5])
qc.u3(0.33118,3.21088,0.64861,q[4])
qc.cx(q[2],q[4])
qc.u3(0.28301,0.96651,5.93899,q[4])
qc.u3(2.05826,3.97913,3.29051,q[1])
qc.cx(q[4],q[3])
qc.cx(q[0],q[1])
qc.ccx(q[4],q[1],q[3])
qc.u3(1.09219,1.67278,2.82483,q[2])
qc.u3(1.02009,4.67687,1.5157,q[0])
qc.u1(0.03429,q[1])
qc.u2(5.54011,5.63028,q[5])
qc.u2(2.9155,3.06716,q[3])
qc.cx(q[5],q[0])
qc.u1(1.94651,q[1])
qc.ccx(q[2],q[0],q[3])
qc.u1(0.655,q[1])
qc.u2(4.4241,2.35285,q[4])
qc.cx(q[1],q[4])
qc.cx(q[3],q[5])
qc.u2(0.45157,5.66289,q[0])
qc.ccx(q[4],q[5],q[0])
qc.cx(q[1],q[3])
qc.u3(1.87876,4.92492,5.14539,q[3])
qc.ccx(q[2],q[5],q[3])
qc.u1(4.58351,q[4])
qc.u2(0.48232,2.04165,q[3])
qc.u2(5.2832,4.22088,q[2])
qc.u1(0.52425,q[4])
qc.u2(6.25891,1.59979,q[1])
qc.u1(4.08651,q[1])
qc.ccx(q[4],q[1],q[2])
qc.u2(2.35149,1.65995,q[5])
qc.cx(q[3],q[4])
qc.u3(0.65075,5.01719,3.76064,q[4])
qc.u1(3.81454,q[2])
qc.cx(q[2],q[4])
qc.u1(2.04886,q[4])
qc.ccx(q[2],q[3],q[4])
qc.ccx(q[0],q[3],q[2])
qc.ccx(q[0],q[5],q[3])
qc.u2(3.13825,6.08224,q[4])
qc.cx(q[3],q[4])
qc.cx(q[5],q[0])
qc.u3(1.52184,1.02265,4.41338,q[5])
qc.u1(2.5678,q[5])
qc.u2(3.68425,5.23384,q[1])
qc.u3(2.21369,0.61146,4.30881,q[5])
qc.ccx(q[0],q[1],q[4])
qc.u3(2.08627,6.17593,1.74865,q[3])
qc.u3(0.28701,2.99665,3.7345,q[0])
qc.u3(2.73092,3.41737,3.1533,q[5])
qc.ccx(q[1],q[5],q[2])
qc.u1(4.93049,q[5])
qc.u1(3.39668,q[0])
qc.u2(5.99455,0.75447,q[5])
qc.u1(1.61436,q[4])
qc.u3(1.69616,2.32972,3.08114,q[3])
qc.cx(q[4],q[0])
qc.u2(4.86824,1.44568,q[3])
qc.cx(q[5],q[2])
qc.u2(3.83668,4.2556,q[4])
qc.ccx(q[0],q[3],q[4])
qc.u1(0.76807,q[2])
qc.u2(1.40799,2.80614,q[0])
qc.u1(2.93379,q[2])
qc.ccx(q[4],q[5],q[0])
qc.ccx(q[4],q[3],q[2])
qc.u3(2.22469,2.38312,0.53791,q[5])
qc.ccx(q[1],q[3],q[4])
qc.cx(q[1],q[3])
qc.ccx(q[0],q[5],q[4])
qc.u2(2.47173,2.44424,q[0])
qc.u2(2.56105,4.38275,q[3])
qc.u3(0.40068,4.91242,1.33097,q[0])
qc.u1(1.28035,q[3])
qc.ccx(q[1],q[5],q[4])
qc.u3(0.00171,1.76518,0.50873,q[3])
qc.u3(0.906,0.41573,1.62031,q[2])
qc.u1(3.54846,q[0])
qc.cx(q[2],q[3])
qc.u1(3.32996,q[3])
qc.u1(3.44089,q[2])
qc.u1(1.82351,q[3])
qc.u3(0.36436,6.17287,1.50224,q[2])
qc.cx(q[1],q[0])
qc.ccx(q[3],q[4],q[0])
qc.u2(0.42235,5.01367,q[0])
qc.u3(0.26935,0.94091,2.11406,q[3])
qc.u1(6.07416,q[5])
qc.cx(q[3],q[2])
qc.u1(1.17259,q[2])
qc.cx(q[0],q[2])
qc.ccx(q[5],q[3],q[1])
qc.u1(0.10103,q[2])
qc.cx(q[5],q[4])
qc.u1(1.82749,q[2])
qc.u1(1.78726,q[5])
qc.cx(q[4],q[1])
qc.cx(q[0],q[3])
qc.u2(3.26759,2.19383,q[2])
qc.u3(0.71949,0.59349,4.11266,q[1])
qc.u2(5.22334,1.58942,q[5])
qc.cx(q[2],q[5])
qc.ccx(q[3],q[2],q[4])
qc.cx(q[4],q[1])
qc.u2(1.37629,4.72412,q[0])
qc.u3(2.59972,1.91356,0.08634,q[3])
qc.cx(q[3],q[5])
qc.u2(4.2731,2.65355,q[4])
qc.u3(1.50412,3.52839,3.83029,q[2])
qc.cx(q[4],q[2])
qc.ccx(q[4],q[1],q[3])
qc.cx(q[4],q[3])
qc.u3(0.10879,2.86828,2.39788,q[0])
qc.cx(q[1],q[3])
qc.u1(1.46008,q[3])
qc.cx(q[3],q[1])
qc.u2(0.3875,4.35033,q[3])
qc.ccx(q[5],q[1],q[4])
qc.u1(4.96113,q[5])
qc.ccx(q[3],q[1],q[0])
qc.u3(2.0573,2.56368,5.93415,q[2])
qc.u1(0.59811,q[4])
qc.u1(1.39135,q[3])
qc.u3(1.83243,0.79893,2.59959,q[4])
circuits = [qc]
job = execute(circuits, backend1, **options)
result = job.result()
print(result)
job = execute(circuits, backend2, **options)
result = job.result()
print(result)
a = np.loadtxt('a.txt',dtype=complex)
b = np.loadtxt('a1.txt',dtype=complex)
p = a.real
q = a.imag
c = b.real
d = b.imag
if(np.allclose(p,c) and np.allclose(q,d)):
    print('Your result is right.')
else:
    print('Your result is wrong') 
